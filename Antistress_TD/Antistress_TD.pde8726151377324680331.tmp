int draggingStatus;
TowerButton[] towerButtons = new TowerButton[5];
Tower draggedTower;
Square[][] squares = new Square[10][5];

void setup() {
  fullScreen();
  rectMode(CORNERS);

  startUp();
}

void draw() {
  fill(200);
  rect(-1, height*0.85-1, width, height);

  for (int i = 0; i < squares.length; i++) for (int j = 0; j < squares[0].length; j++) {
    fill(255);
    squares[i][j].display();
  }

  //towerButtons
  boolean hovering = false;
  for (TowerButton t : towerButtons) if (t.collision()) {
    hovering = true;
  }

  if (hovering || draggingStatus > 0) cursor(HAND);
  else cursor(ARROW);


  //display towerbuttons
  for (TowerButton t : towerButtons) {
    if (draggingStatus == t.towerNum) {
      t.display(2);
    } else if (t.collision() && draggingStatus < 1) {
      t.display(1);
    } else {
      t.display(0);
    }
  }

  //dragged tower
  if (draggingStatus > 0) {
    draggedTower = new Tower(mouseX, mouseY, draggingStatus);
    draggedTower.display();
  }
}

void mousePressed() {
  for (TowerButton t : towerButtons) {
    if (t.collision()) {
      draggingStatus = t.towerNum;
    }
  }
}

void mouseReleased() {
  //hvis der blev trukket før er der ikke mere
  draggingStatus = 0;
}

void keyPressed() {
  if (key == 'q' || key == 'Q') draggingStatus = 6;
  if (key == 'w' || key == 'W') draggingStatus = 7;
  if (key == 'e' || key == 'E') draggingStatus = 8;
  if (key == 'r' || key == 'R') draggingStatus = 9;
  if (key == 't' || key == 'T') draggingStatus = 10;
}

void startUp() {
  //placering af towerbuttons
  for (int i = 0; i < towerButtons.length; i++) {
    towerButtons[i] = new TowerButton(int(width*0.13) + i*int(width*0.13), int(height*0.87), int(width*0.20) + i*int(width*0.13), int(height*0.93), i+1);
  }
  //placering af hvert felt
  for (int i = 0; i < squares.length; i++) for (int j = 0; j < squares[0].length; j++) {
    //-1 fordi der ellers ville være en kant med i venstre side og i toppen
    squares[i][j] = new Square(i*width/squares.length-1, int(j*height*0.85/squares[0].length)-1, (i+1)*width/squares.length-1, int((j+1)*height*0.85/squares[0].length)-1);
  }
}

void displayTower(int x, int y, int towerNum, boolean transparent) {
  switch(towerNum) {
  case 1:
  case 6:
    if (!transparent) fill(255, 0, 0);
    else fill(255, 0, 0, 50);
    break;
  case 2:
  case 7:
    if (!transparent) fill(0, 255, 0);
    else fill(0, 255, 0, 50);
    break;
  case 3:
  case 8:
    if (!transparent) fill(0, 0, 255);
    else fill(0, 0, 255, 50);
    break;
  case 4:
  case 9:
    if (!transparent) fill(255, 255, 0);
    else fill(255, 255, 0, 50);
    break;
  case 5:
  case 10:
    if (!transparent) fill(0);
    else fill(0, 50);
    break;
  }
  if (transparent) stroke(0, 50);

  circle(x, y, 80);
  stroke(0);
}
